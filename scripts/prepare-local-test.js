#!/usr/bin/env node

/**
 * Script pour pr√©parer les packages Hopla UI pour des tests locaux
 *
 * Ce script utilise yalc pour publier les packages localement et les lier √† une application de test.
 * Yalc est pr√©f√©r√© √† pnpm link car il √©vite les probl√®mes courants comme les duplications de React
 * et les probl√®mes de r√©solution des peerDependencies.
 *
 * Usage:
 *   node scripts/prepare-local-test.js [--target-app path/to/app]
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import readline from 'readline';
// Note: Nous utilisons uniquement des chemins relatifs ou des chemins absolus fournis par l'utilisateur
// Pas besoin d'utiliser fileURLToPath/import.meta.url pour ce script

// Configuration
const packagesToPublish = [
  'packages/react',
  'packages/core',
  'packages/system',
  'packages/utils',
  'packages/icons',
];

// V√©rifier si yalc est install√©
function checkYalcInstallation() {
  try {
    execSync('yalc --version', { stdio: 'ignore' });
    return true;
  } catch (error) {
    return false;
  }
}

// Installer yalc si n√©cessaire
function installYalc() {
  console.log('üîß Installation de yalc...');
  execSync('npm install -g yalc', { stdio: 'inherit' });
  console.log('‚úÖ yalc install√© avec succ√®s!');
}

// Construire les packages
function buildPackages() {
  console.log('üî® Construction des packages...');
  execSync('pnpm build', { stdio: 'inherit' });
  console.log('‚úÖ Packages construits avec succ√®s!');
}

// Publier les packages avec yalc
function publishPackages() {
  console.log('üì¶ Publication des packages avec yalc...');
  
  packagesToPublish.forEach(packagePath => {
    if (fs.existsSync(packagePath)) {
      console.log(`üì§ Publication de ${packagePath}...`);
      // Utiliser --force pour s'assurer que les packages sont republi√©s m√™me s'ils existent d√©j√†
      execSync(`cd ${packagePath} && yalc publish --no-scripts --force`, { stdio: 'inherit' });
    } else {
      console.log(`‚ö†Ô∏è Le package ${packagePath} n'existe pas, ignor√©.`);
    }
  });
  
  console.log('‚úÖ Packages publi√©s avec succ√®s!');
}

// Installer les d√©pendances peer requises dans l'application cible
function installPeerDependencies(targetApp) {
  console.log('üì¶ V√©rification et installation des d√©pendances peer requises...');
  
  try {
    // Lire le package.json de l'application cible
    const packageJsonPath = path.join(targetApp, 'package.json');
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    const dependencies = { ...packageJson.dependencies || {}, ...packageJson.devDependencies || {} };
    
    // V√©rifier si React et React DOM sont install√©s
    const missingDeps = [];
    if (!dependencies.react) missingDeps.push('react@18');
    if (!dependencies['react-dom']) missingDeps.push('react-dom@18');
    
    // Installer les d√©pendances manquantes
    if (missingDeps.length > 0) {
      console.log(`üì• Installation des d√©pendances peer manquantes: ${missingDeps.join(', ')}`);
      execSync(`cd ${targetApp} && pnpm add ${missingDeps.join(' ')}`, { stdio: 'inherit' });
      console.log('‚úÖ D√©pendances peer install√©es avec succ√®s!');
    } else {
      console.log('‚úÖ Toutes les d√©pendances peer requises sont d√©j√† install√©es.');
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'installation des d√©pendances peer:', error.message);
    console.log('‚ö†Ô∏è Vous devrez peut-√™tre installer manuellement react et react-dom dans votre application.');
  }
}

// Ajouter les packages √† l'application cible
function addPackagesToApp(targetApp) {
  console.log(`üîó Ajout des packages √† l'application: ${targetApp}`);
  
  if (!fs.existsSync(targetApp)) {
    console.error(`‚ùå L'application cible n'existe pas: ${targetApp}`);
    process.exit(1);
  }
  
  // V√©rifier si le dossier est une application valide (contient package.json)
  const packageJsonPath = path.join(targetApp, 'package.json');
  if (!fs.existsSync(packageJsonPath)) {
    console.error(
      `‚ùå Le dossier cible ne semble pas √™tre une application valide (pas de package.json): ${targetApp}`
    );
    process.exit(1);
  }
  
  // Installer les d√©pendances peer requises
  installPeerDependencies(targetApp);
  
  // Ajouter chaque package √† l'application
  packagesToPublish.forEach(packagePath => {
    // Lire le package.json en utilisant fs au lieu de require
    const packageJsonPath = path.resolve(process.cwd(), packagePath, 'package.json');
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    const packageName = packageJson.name;
    console.log(`üîó Liaison de ${packageName} √† l'application...`);
    // Utiliser l'option --copy pour copier les fichiers au lieu d'utiliser des liens symboliques
    // et --force pour mettre √† jour les packages existants
    execSync(`cd ${targetApp} && yalc add ${packageName} --copy --force`, { stdio: 'inherit' });
  });

  // V√©rifier l'installation des packages
  verifyPackageInstallation(targetApp, packagesToPublish);
  
  console.log("‚úÖ Packages ajout√©s √† l'application avec succ√®s!");
  console.log("‚ÑπÔ∏è Pour mettre √† jour les packages apr√®s des modifications, ex√©cutez √† nouveau cette commande.");
}

// V√©rifier l'installation des packages
function verifyPackageInstallation(targetApp, packagesToPublish) {
  console.log('üîç V√©rification de l\'installation des packages...');
  
  packagesToPublish.forEach(packagePath => {
    try {
      // Lire le package.json pour obtenir le nom du package
      const packageJsonPath = path.resolve(process.cwd(), packagePath, 'package.json');
      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      const packageName = packageJson.name;
      
      // V√©rifier si le package est install√© dans l'application cible
      const targetPackagePath = path.join(targetApp, 'node_modules', packageName);
      
      if (fs.existsSync(targetPackagePath)) {
        // V√©rifier si le package contient des fichiers dans dist
        const distPath = path.join(targetPackagePath, 'dist');
        if (fs.existsSync(distPath)) {
          const files = fs.readdirSync(distPath);
          console.log(`‚úÖ ${packageName}: Install√© correctement avec ${files.length} fichiers dans /dist`);
        } else {
          console.log(`‚ö†Ô∏è ${packageName}: Install√© mais le dossier /dist est manquant ou vide`);
        }
      } else {
        console.log(`‚ùå ${packageName}: Non install√© dans l'application cible`);
      }
    } catch (error) {
      console.error(`‚ùå Erreur lors de la v√©rification du package ${packagePath}:`, error.message);
    }
  });
  
  // V√©rifier les d√©pendances peer
  try {
    const targetPackageJsonPath = path.join(targetApp, 'package.json');
    const targetPackageJson = JSON.parse(fs.readFileSync(targetPackageJsonPath, 'utf8'));
    const dependencies = { ...targetPackageJson.dependencies || {}, ...targetPackageJson.devDependencies || {} };
    
    if (dependencies.react) {
      console.log(`‚úÖ React d√©tect√©: ${dependencies.react}`);
    } else {
      console.log('‚ö†Ô∏è React non d√©tect√© dans les d√©pendances de l\'application cible');
    }
    
    if (dependencies['react-dom']) {
      console.log(`‚úÖ React DOM d√©tect√©: ${dependencies['react-dom']}`);
    } else {
      console.log('‚ö†Ô∏è React DOM non d√©tect√© dans les d√©pendances de l\'application cible');
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des d√©pendances peer:', error.message);
  }
}

// Configurer le mode watch pour les packages
function setupWatchMode() {
  console.log('üëÄ Configuration du mode watch pour les packages...');
  console.log('');
  console.log("Pour activer le mode watch et mettre √† jour automatiquement l'application cible:");
  console.log('1. Ex√©cutez dans un terminal s√©par√©: pnpm build:watch');
  console.log('2. Dans un autre terminal, ex√©cutez: yalc watch');
  console.log('');
  console.log(
    "Les modifications apport√©es aux packages seront automatiquement reconstruites et propag√©es √† l'application cible."
  );
}

// Fonction principale
async function main() {
  console.log('üöÄ Pr√©paration des packages Hopla UI pour les tests locaux...');

  // V√©rifier les arguments
  const args = process.argv.slice(2);
  let targetApp = null;

  // Analyser les arguments
  for (let i = 0; i < args.length; i++) {
    if (args[i] === '--target-app' && i + 1 < args.length) {
      targetApp = args[i + 1];
      i++;
    }
  }

  // Si aucune application cible n'est sp√©cifi√©e, demander √† l'utilisateur
  if (!targetApp) {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    });

    targetApp = await new Promise(resolve => {
      rl.question("Chemin vers l'application cible (absolu ou relatif): ", answer => {
        rl.close();
        resolve(answer);
      });
    });

    // Si l'utilisateur n'a pas fourni de chemin, utiliser un chemin par d√©faut
    if (!targetApp) {
      console.log('‚ùå Aucune application cible sp√©cifi√©e. Arr√™t du script.');
      process.exit(1);
    }
  }

  // Convertir le chemin relatif en chemin absolu si n√©cessaire
  if (!path.isAbsolute(targetApp)) {
    targetApp = path.resolve(process.cwd(), targetApp);
  }

  // V√©rifier si yalc est install√©, sinon l'installer
  if (!checkYalcInstallation()) {
    console.log("‚ö†Ô∏è yalc n'est pas install√©.");
    installYalc();
  }

  // Construire les packages
  buildPackages();

  // Publier les packages avec yalc
  publishPackages();

  // Ajouter les packages √† l'application cible
  addPackagesToApp(targetApp);

  // Configurer le mode watch
  setupWatchMode();

  console.log('');
  console.log('üéâ Pr√©paration termin√©e! Les packages Hopla UI sont pr√™ts pour les tests locaux.');
  console.log(`üìÅ Application cible: ${targetApp}`);
}

main().catch(error => {
  console.error("‚ùå Une erreur s'est produite:", error);
  process.exit(1);
});
